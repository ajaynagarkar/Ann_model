{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1481789,"sourceType":"datasetVersion","datasetId":869651}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-01T04:29:56.411217Z","iopub.execute_input":"2024-10-01T04:29:56.411680Z","iopub.status.idle":"2024-10-01T04:29:57.477565Z","shell.execute_reply.started":"2024-10-01T04:29:56.411612Z","shell.execute_reply":"2024-10-01T04:29:57.476394Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/credit-card-customer-churn-prediction/Churn_Modelling.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/credit-card-customer-churn-prediction/Churn_Modelling.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:30:24.920947Z","iopub.execute_input":"2024-10-01T04:30:24.921704Z","iopub.status.idle":"2024-10-01T04:30:24.952842Z","shell.execute_reply.started":"2024-10-01T04:30:24.921632Z","shell.execute_reply":"2024-10-01T04:30:24.951568Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:30:37.070111Z","iopub.execute_input":"2024-10-01T04:30:37.070554Z","iopub.status.idle":"2024-10-01T04:30:37.103322Z","shell.execute_reply.started":"2024-10-01T04:30:37.070510Z","shell.execute_reply":"2024-10-01T04:30:37.101997Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n3          4    15701354      Boni          699    France  Female   39   \n4          5    15737888  Mitchell          850     Spain  Female   43   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n3       1       0.00              2          0               0   \n4       2  125510.82              1          1               1   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  \n3         93826.63       0  \n4         79084.10       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>15701354</td>\n      <td>Boni</td>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>15737888</td>\n      <td>Mitchell</td>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:32:06.664857Z","iopub.execute_input":"2024-10-01T04:32:06.665302Z","iopub.status.idle":"2024-10-01T04:32:06.672871Z","shell.execute_reply.started":"2024-10-01T04:32:06.665259Z","shell.execute_reply":"2024-10-01T04:32:06.671677Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(10000, 14)"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:32:21.789999Z","iopub.execute_input":"2024-10-01T04:32:21.790448Z","iopub.status.idle":"2024-10-01T04:32:21.817666Z","shell.execute_reply.started":"2024-10-01T04:32:21.790404Z","shell.execute_reply":"2024-10-01T04:32:21.816397Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 14 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   RowNumber        10000 non-null  int64  \n 1   CustomerId       10000 non-null  int64  \n 2   Surname          10000 non-null  object \n 3   CreditScore      10000 non-null  int64  \n 4   Geography        10000 non-null  object \n 5   Gender           10000 non-null  object \n 6   Age              10000 non-null  int64  \n 7   Tenure           10000 non-null  int64  \n 8   Balance          10000 non-null  float64\n 9   NumOfProducts    10000 non-null  int64  \n 10  HasCrCard        10000 non-null  int64  \n 11  IsActiveMember   10000 non-null  int64  \n 12  EstimatedSalary  10000 non-null  float64\n 13  Exited           10000 non-null  int64  \ndtypes: float64(2), int64(9), object(3)\nmemory usage: 1.1+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:33:12.425194Z","iopub.execute_input":"2024-10-01T04:33:12.425641Z","iopub.status.idle":"2024-10-01T04:33:12.443308Z","shell.execute_reply.started":"2024-10-01T04:33:12.425600Z","shell.execute_reply":"2024-10-01T04:33:12.442212Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"df['Exited'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:33:37.198775Z","iopub.execute_input":"2024-10-01T04:33:37.199265Z","iopub.status.idle":"2024-10-01T04:33:37.210885Z","shell.execute_reply.started":"2024-10-01T04:33:37.199213Z","shell.execute_reply":"2024-10-01T04:33:37.209621Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Exited\n0    7963\n1    2037\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df['Geography'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:34:25.639000Z","iopub.execute_input":"2024-10-01T04:34:25.640103Z","iopub.status.idle":"2024-10-01T04:34:25.651148Z","shell.execute_reply.started":"2024-10-01T04:34:25.640052Z","shell.execute_reply":"2024-10-01T04:34:25.649861Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"Geography\nFrance     5014\nGermany    2509\nSpain      2477\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df.drop(columns = ['RowNumber','CustomerId','Surname'],inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:37:17.313508Z","iopub.execute_input":"2024-10-01T04:37:17.313961Z","iopub.status.idle":"2024-10-01T04:37:17.324879Z","shell.execute_reply.started":"2024-10-01T04:37:17.313917Z","shell.execute_reply":"2024-10-01T04:37:17.323365Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:37:32.446592Z","iopub.execute_input":"2024-10-01T04:37:32.447762Z","iopub.status.idle":"2024-10-01T04:37:32.463964Z","shell.execute_reply.started":"2024-10-01T04:37:32.447700Z","shell.execute_reply":"2024-10-01T04:37:32.462567Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   CreditScore Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n0          619    France  Female   42       2       0.00              1   \n1          608     Spain  Female   41       1   83807.86              1   \n2          502    France  Female   42       8  159660.80              3   \n3          699    France  Female   39       1       0.00              2   \n4          850     Spain  Female   43       2  125510.82              1   \n\n   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n0          1               1        101348.88       1  \n1          0               1        112542.58       0  \n2          1               0        113931.57       1  \n3          0               0         93826.63       0  \n4          1               1         79084.10       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df = pd.get_dummies(df,columns=['Geography','Gender'],drop_first = True)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:41:51.841336Z","iopub.execute_input":"2024-10-01T04:41:51.841840Z","iopub.status.idle":"2024-10-01T04:41:51.948354Z","shell.execute_reply.started":"2024-10-01T04:41:51.841794Z","shell.execute_reply":"2024-10-01T04:41:51.946873Z"},"trusted":true},"execution_count":22,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[22], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_dummies\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mGeography\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mGender\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43mdrop_first\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/reshape/encoding.py:169\u001b[0m, in \u001b[0;36mget_dummies\u001b[0;34m(data, prefix, prefix_sep, dummy_na, columns, sparse, drop_first, dtype)\u001b[0m\n\u001b[1;32m    167\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInput must be a list-like for parameter `columns`\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    168\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 169\u001b[0m     data_to_encode \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    171\u001b[0m \u001b[38;5;66;03m# validate prefixes and separator to avoid silently dropping cols\u001b[39;00m\n\u001b[1;32m    172\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcheck_len\u001b[39m(item, name: \u001b[38;5;28mstr\u001b[39m):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4108\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   4107\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 4108\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   4110\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   4111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6197\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6198\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 6200\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6202\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   6203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   6204\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6249\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m nmissing:\n\u001b[1;32m   6248\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m nmissing \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mlen\u001b[39m(indexer):\n\u001b[0;32m-> 6249\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6251\u001b[0m     not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[1;32m   6252\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['Geography', 'Gender'], dtype='object')] are in the [columns]\""],"ename":"KeyError","evalue":"\"None of [Index(['Geography', 'Gender'], dtype='object')] are in the [columns]\"","output_type":"error"}]},{"cell_type":"code","source":"df[['Geography_Germany','Geography_Spain']] = df[['Geography_Germany','Geography_Spain']].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:44:31.667006Z","iopub.execute_input":"2024-10-01T04:44:31.667477Z","iopub.status.idle":"2024-10-01T04:44:31.676043Z","shell.execute_reply.started":"2024-10-01T04:44:31.667432Z","shell.execute_reply":"2024-10-01T04:44:31.674730Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"df['Gender_Male'] = df['Gender_Male'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:45:10.488675Z","iopub.execute_input":"2024-10-01T04:45:10.489867Z","iopub.status.idle":"2024-10-01T04:45:10.495856Z","shell.execute_reply.started":"2024-10-01T04:45:10.489807Z","shell.execute_reply":"2024-10-01T04:45:10.494487Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:45:13.578648Z","iopub.execute_input":"2024-10-01T04:45:13.579700Z","iopub.status.idle":"2024-10-01T04:45:13.599567Z","shell.execute_reply.started":"2024-10-01T04:45:13.579624Z","shell.execute_reply":"2024-10-01T04:45:13.598385Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"      CreditScore  Age  Tenure    Balance  NumOfProducts  HasCrCard  \\\n0             619   42       2       0.00              1          1   \n1             608   41       1   83807.86              1          0   \n2             502   42       8  159660.80              3          1   \n3             699   39       1       0.00              2          0   \n4             850   43       2  125510.82              1          1   \n...           ...  ...     ...        ...            ...        ...   \n9995          771   39       5       0.00              2          1   \n9996          516   35      10   57369.61              1          1   \n9997          709   36       7       0.00              1          0   \n9998          772   42       3   75075.31              2          1   \n9999          792   28       4  130142.79              1          1   \n\n      IsActiveMember  EstimatedSalary  Exited  Geography_Germany  \\\n0                  1        101348.88       1                  0   \n1                  1        112542.58       0                  0   \n2                  0        113931.57       1                  0   \n3                  0         93826.63       0                  0   \n4                  1         79084.10       0                  0   \n...              ...              ...     ...                ...   \n9995               0         96270.64       0                  0   \n9996               1        101699.77       0                  0   \n9997               1         42085.58       1                  0   \n9998               0         92888.52       1                  1   \n9999               0         38190.78       0                  0   \n\n      Geography_Spain  Gender_Male  \n0                   0            0  \n1                   1            0  \n2                   0            0  \n3                   0            0  \n4                   1            0  \n...               ...          ...  \n9995                0            1  \n9996                0            1  \n9997                0            0  \n9998                0            1  \n9999                0            0  \n\n[10000 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n      <th>Geography_Germany</th>\n      <th>Geography_Spain</th>\n      <th>Gender_Male</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>699</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>850</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9995</th>\n      <td>771</td>\n      <td>39</td>\n      <td>5</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>96270.64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9996</th>\n      <td>516</td>\n      <td>35</td>\n      <td>10</td>\n      <td>57369.61</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101699.77</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9997</th>\n      <td>709</td>\n      <td>36</td>\n      <td>7</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>42085.58</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9998</th>\n      <td>772</td>\n      <td>42</td>\n      <td>3</td>\n      <td>75075.31</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>92888.52</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9999</th>\n      <td>792</td>\n      <td>28</td>\n      <td>4</td>\n      <td>130142.79</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38190.78</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10000 rows × 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = df.drop(columns=['Exited'])\ny=df['Exited']","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:49:05.727040Z","iopub.execute_input":"2024-10-01T04:49:05.727546Z","iopub.status.idle":"2024-10-01T04:49:05.734983Z","shell.execute_reply.started":"2024-10-01T04:49:05.727500Z","shell.execute_reply":"2024-10-01T04:49:05.733762Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state = 1)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:50:31.883500Z","iopub.execute_input":"2024-10-01T04:50:31.884512Z","iopub.status.idle":"2024-10-01T04:50:31.893847Z","shell.execute_reply.started":"2024-10-01T04:50:31.884460Z","shell.execute_reply":"2024-10-01T04:50:31.892615Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"X_train","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:50:35.351069Z","iopub.execute_input":"2024-10-01T04:50:35.351502Z","iopub.status.idle":"2024-10-01T04:50:35.374015Z","shell.execute_reply.started":"2024-10-01T04:50:35.351460Z","shell.execute_reply":"2024-10-01T04:50:35.372674Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"      CreditScore  Age  Tenure    Balance  NumOfProducts  HasCrCard  \\\n2694          628   29       3  113146.98              2          0   \n5140          626   29       4  105767.28              2          0   \n2568          612   47       6  130024.87              1          1   \n3671          646   52       6  111739.40              2          0   \n7427          714   33       8  122017.19              1          0   \n...           ...  ...     ...        ...            ...        ...   \n2895          621   47       7  107363.29              1          1   \n7813          684   63       3   81245.79              1          1   \n905           672   45       9       0.00              1          1   \n5192          663   39       8       0.00              2          1   \n235           763   42       6  100160.75              1          1   \n\n      IsActiveMember  EstimatedSalary  Geography_Germany  Geography_Spain  \\\n2694               1        124749.08                  1                0   \n5140               0         41104.82                  0                0   \n2568               1         45750.21                  1                0   \n3671               1         68367.18                  1                0   \n7427               0        162515.17                  0                1   \n...              ...              ...                ...              ...   \n2895               1         66799.28                  1                0   \n7813               0         69643.31                  1                0   \n905                1         92027.69                  0                0   \n5192               1        101168.90                  0                0   \n235                0         33462.94                  1                0   \n\n      Gender_Male  \n2694            1  \n5140            0  \n2568            0  \n3671            0  \n7427            1  \n...           ...  \n2895            1  \n7813            0  \n905             0  \n5192            0  \n235             1  \n\n[8000 rows x 11 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Geography_Germany</th>\n      <th>Geography_Spain</th>\n      <th>Gender_Male</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2694</th>\n      <td>628</td>\n      <td>29</td>\n      <td>3</td>\n      <td>113146.98</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>124749.08</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5140</th>\n      <td>626</td>\n      <td>29</td>\n      <td>4</td>\n      <td>105767.28</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>41104.82</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2568</th>\n      <td>612</td>\n      <td>47</td>\n      <td>6</td>\n      <td>130024.87</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>45750.21</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3671</th>\n      <td>646</td>\n      <td>52</td>\n      <td>6</td>\n      <td>111739.40</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>68367.18</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7427</th>\n      <td>714</td>\n      <td>33</td>\n      <td>8</td>\n      <td>122017.19</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>162515.17</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2895</th>\n      <td>621</td>\n      <td>47</td>\n      <td>7</td>\n      <td>107363.29</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>66799.28</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7813</th>\n      <td>684</td>\n      <td>63</td>\n      <td>3</td>\n      <td>81245.79</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>69643.31</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>905</th>\n      <td>672</td>\n      <td>45</td>\n      <td>9</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>92027.69</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5192</th>\n      <td>663</td>\n      <td>39</td>\n      <td>8</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101168.90</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>235</th>\n      <td>763</td>\n      <td>42</td>\n      <td>6</td>\n      <td>100160.75</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>33462.94</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>8000 rows × 11 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:50:41.111121Z","iopub.execute_input":"2024-10-01T04:50:41.111575Z","iopub.status.idle":"2024-10-01T04:50:41.121461Z","shell.execute_reply.started":"2024-10-01T04:50:41.111525Z","shell.execute_reply":"2024-10-01T04:50:41.119803Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"2694    0\n5140    0\n2568    1\n3671    0\n7427    0\n       ..\n2895    0\n7813    1\n905     1\n5192    0\n235     1\nName: Exited, Length: 8000, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nScalar = StandardScaler()\nX_train_Scaled =Scalar.fit_transform(X_train)\nX_test_Scaled = Scalar.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:53:59.179579Z","iopub.execute_input":"2024-10-01T04:53:59.180017Z","iopub.status.idle":"2024-10-01T04:53:59.195068Z","shell.execute_reply.started":"2024-10-01T04:53:59.179978Z","shell.execute_reply":"2024-10-01T04:53:59.193736Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"X_train_Scaled","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:54:22.327331Z","iopub.execute_input":"2024-10-01T04:54:22.327808Z","iopub.status.idle":"2024-10-01T04:54:22.337083Z","shell.execute_reply.started":"2024-10-01T04:54:22.327764Z","shell.execute_reply":"2024-10-01T04:54:22.335784Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"array([[-0.23082038, -0.94449979, -0.70174202, ...,  1.71490137,\n        -0.57273139,  0.91509065],\n       [-0.25150912, -0.94449979, -0.35520275, ..., -0.58312392,\n        -0.57273139, -1.09278791],\n       [-0.3963303 ,  0.77498705,  0.33787579, ...,  1.71490137,\n        -0.57273139, -1.09278791],\n       ...,\n       [ 0.22433188,  0.58393295,  1.3774936 , ..., -0.58312392,\n        -0.57273139, -1.09278791],\n       [ 0.13123255,  0.01077067,  1.03095433, ..., -0.58312392,\n        -0.57273139, -1.09278791],\n       [ 1.1656695 ,  0.29735181,  0.33787579, ...,  1.71490137,\n        -0.57273139,  0.91509065]])"},"metadata":{}}]},{"cell_type":"code","source":"X_test_Scaled","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:54:33.562911Z","iopub.execute_input":"2024-10-01T04:54:33.563398Z","iopub.status.idle":"2024-10-01T04:54:33.572021Z","shell.execute_reply.started":"2024-10-01T04:54:33.563340Z","shell.execute_reply":"2024-10-01T04:54:33.570787Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"array([[-1.03768121,  0.77498705, -1.0482813 , ..., -0.58312392,\n        -0.57273139,  0.91509065],\n       [ 0.30708683, -0.46686456, -0.70174202, ..., -0.58312392,\n        -0.57273139,  0.91509065],\n       [-1.23422423,  0.29735181, -1.0482813 , ..., -0.58312392,\n        -0.57273139, -1.09278791],\n       ...,\n       [-0.86182692, -0.46686456,  1.72403288, ..., -0.58312392,\n         1.74601919,  0.91509065],\n       [-0.30323097, -0.84897275, -1.0482813 , ...,  1.71490137,\n        -0.57273139, -1.09278791],\n       [ 0.04847759,  1.25262228,  1.3774936 , ...,  1.71490137,\n        -0.57273139,  0.91509065]])"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:57:05.111364Z","iopub.execute_input":"2024-10-01T04:57:05.111945Z","iopub.status.idle":"2024-10-01T04:57:05.120241Z","shell.execute_reply.started":"2024-10-01T04:57:05.111888Z","shell.execute_reply":"2024-10-01T04:57:05.118918Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"model = Sequential()\n\nmodel.add(Dense(3, activation='sigmoid',input_dim= 11))\nmodel.add(Dense(1,activation = 'sigmoid'))","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:02:29.254962Z","iopub.execute_input":"2024-10-01T05:02:29.255445Z","iopub.status.idle":"2024-10-01T05:02:29.286863Z","shell.execute_reply.started":"2024-10-01T05:02:29.255396Z","shell.execute_reply":"2024-10-01T05:02:29.285399Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"\n\n# Initialize the model\nmodel = Sequential()\n\n# Input layer (input shape is 11, i.e., 11 features)\nmodel.add(Dense(3, activation='sigmoid', input_dim=11))\n\n# Output layer (binary classification, hence 1 neuron with sigmoid activation)\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Summary of the model\nmodel.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:01:18.491126Z","iopub.execute_input":"2024-10-01T05:01:18.491608Z","iopub.status.idle":"2024-10-01T05:01:18.595808Z","shell.execute_reply.started":"2024-10-01T05:01:18.491563Z","shell.execute_reply":"2024-10-01T05:01:18.593688Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_4\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_4\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │            \u001b[38;5;34m36\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m4\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m40\u001b[0m (160.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> (160.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m40\u001b[0m (160.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> (160.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"# model compilation\n\nmodel.compile(loss = 'binary_crossentropy', optimizer ='Adam')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:05:18.388699Z","iopub.execute_input":"2024-10-01T05:05:18.389110Z","iopub.status.idle":"2024-10-01T05:05:18.405612Z","shell.execute_reply.started":"2024-10-01T05:05:18.389072Z","shell.execute_reply":"2024-10-01T05:05:18.404359Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"model.fit(X_train_Scaled, y_train, epochs = 10)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:06:15.144894Z","iopub.execute_input":"2024-10-01T05:06:15.145405Z","iopub.status.idle":"2024-10-01T05:06:19.768500Z","shell.execute_reply.started":"2024-10-01T05:06:15.145358Z","shell.execute_reply":"2024-10-01T05:06:19.767456Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 0.6909\nEpoch 2/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.5440\nEpoch 3/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 0.4824\nEpoch 4/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4662\nEpoch 5/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4531\nEpoch 6/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4330\nEpoch 7/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4471\nEpoch 8/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4334\nEpoch 9/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4264\nEpoch 10/10\n\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4358\n","output_type":"stream"},{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7eebb269c100>"},"metadata":{}}]},{"cell_type":"code","source":"model.layers[0].get_weights()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:07:43.952892Z","iopub.execute_input":"2024-10-01T05:07:43.953324Z","iopub.status.idle":"2024-10-01T05:07:43.966558Z","shell.execute_reply.started":"2024-10-01T05:07:43.953282Z","shell.execute_reply":"2024-10-01T05:07:43.965348Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"[array([[ 0.04721198, -0.18904838,  0.05608371],\n        [-1.6389592 ,  1.1108319 ,  0.03563771],\n        [ 0.05358637,  0.06276504,  0.29021904],\n        [-0.08581812,  0.65197414, -0.18857467],\n        [ 0.33277276,  0.2885869 ,  0.25573426],\n        [ 0.0409246 ,  0.10862208, -0.3177638 ],\n        [ 0.5250884 , -0.8308724 , -0.8536165 ],\n        [-0.02110091, -0.16217144,  0.6620943 ],\n        [-0.5092383 ,  0.49067438,  0.7134882 ],\n        [ 0.07689349,  0.21278182,  0.08323058],\n        [ 0.36957657, -0.31862926, -0.25574213]], dtype=float32),\n array([ 0.6399902 , -0.54448056, -0.38617688], dtype=float32)]"},"metadata":{}}]},{"cell_type":"code","source":"model.layers[1].get_weights()","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:08:24.130880Z","iopub.execute_input":"2024-10-01T05:08:24.131365Z","iopub.status.idle":"2024-10-01T05:08:24.142835Z","shell.execute_reply.started":"2024-10-01T05:08:24.131321Z","shell.execute_reply":"2024-10-01T05:08:24.141535Z"},"trusted":true},"execution_count":63,"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"[array([[-2.1573803 ],\n        [ 0.6952204 ],\n        [ 0.24418408]], dtype=float32),\n array([-0.60495657], dtype=float32)]"},"metadata":{}}]},{"cell_type":"code","source":"y_log = model.predict(X_test_Scaled)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:09:59.973009Z","iopub.execute_input":"2024-10-01T05:09:59.973498Z","iopub.status.idle":"2024-10-01T05:10:00.148233Z","shell.execute_reply.started":"2024-10-01T05:09:59.973451Z","shell.execute_reply":"2024-10-01T05:10:00.146991Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:10:14.744912Z","iopub.execute_input":"2024-10-01T05:10:14.745393Z","iopub.status.idle":"2024-10-01T05:10:14.751146Z","shell.execute_reply.started":"2024-10-01T05:10:14.745346Z","shell.execute_reply":"2024-10-01T05:10:14.749578Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"y_pred = np.where(y_log > 0.5,1,0)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:14:26.345740Z","iopub.execute_input":"2024-10-01T05:14:26.346212Z","iopub.status.idle":"2024-10-01T05:14:26.352629Z","shell.execute_reply.started":"2024-10-01T05:14:26.346167Z","shell.execute_reply":"2024-10-01T05:14:26.351266Z"},"trusted":true},"execution_count":72,"outputs":[]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:14:29.556922Z","iopub.execute_input":"2024-10-01T05:14:29.557966Z","iopub.status.idle":"2024-10-01T05:14:29.565429Z","shell.execute_reply.started":"2024-10-01T05:14:29.557918Z","shell.execute_reply":"2024-10-01T05:14:29.564208Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"array([[0],\n       [0],\n       [0],\n       ...,\n       [0],\n       [0],\n       [0]])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:14:33.060855Z","iopub.execute_input":"2024-10-01T05:14:33.061292Z","iopub.status.idle":"2024-10-01T05:14:33.071690Z","shell.execute_reply.started":"2024-10-01T05:14:33.061248Z","shell.execute_reply":"2024-10-01T05:14:33.070257Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"0.8105"},"metadata":{}}]},{"cell_type":"code","source":"# If y_pred is in the form of probabilities, convert to class labels\ny_pred_class = np.argmax(y_pred, axis=1)\n\n# Now compute accuracy\naccuracy = accuracy_score(y_test, y_pred_class)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-01T05:14:36.333204Z","iopub.execute_input":"2024-10-01T05:14:36.333689Z","iopub.status.idle":"2024-10-01T05:14:36.342266Z","shell.execute_reply.started":"2024-10-01T05:14:36.333623Z","shell.execute_reply":"2024-10-01T05:14:36.341019Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"Accuracy: 79.25%\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}